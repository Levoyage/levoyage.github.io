[{"content":"URL for Preview \u0026amp; Architecture Overview Preview Link: http://i-travel-app.s3-website-us-east-1.amazonaws.com/ Component Diagram:\n\u003c!DOCTYPE html\u003e\rComponent Diagram\rIntroduction My classmate Roxie and I created iTravel, a web application that provides personalized travel guides and point-of-interest (POI) recommendations using AI. The platform leverages Kimi API for AI-driven suggestions, along with a React frontend, a Spring Boot backend, and MongoDB Atlas for data storage, all deployed on AWS. Our project combines technology with intelligent suggestions to make travel planning simple and engaging, offering unique travel itineraries based on user preferences.\nDevelopment Process Technology Stack and Tools Frontend:\nReact: For building the user interface and managing dynamic elements. React Router: To manage seamless navigation across various pages. Axios: Facilitates API requests to the backend. CSS Modules: For scoped component styling. Backend:\nSpring Boot: Handles business logic, manages requests, and processes data. MongoDB Atlas: Cloud database for storing user profiles, saved guides, and POIs. Python (Flask): Hosts an image-fetching API using Bing‚Äôs image search to provide relevant images for each recommendation. AI Integration:\nKimi API: Generates travel guides and POIs tailored to user preferences. Key Features and Project Modules Guide and POI Recommendations via Kimi API:\nThe Kimi API generates tailored recommendations based on user input, providing personalized guides and POIs. The backend processes these API responses to deliver consistent and contextually relevant results for the user.\nUser Authentication and Profile Management:\nUsers can create an account, log in, and access their saved guides and POIs. Authentication is required for saving guides, ensuring a secure and personalized experience.\nSave Feature for Guides and POIs:\nUsers can save their preferred guides and POIs. The Profile Page allows them to view saved items, with data stored in MongoDB Atlas and associated with their unique user account.\nImage Retrieval with Bing API and Flask:\nImages enhance recommendations. Our image-fetching API queries Bing‚Äôs image search and serves results through a Flask API, adding visual context to each suggestion.\nDeployment on AWS Deployment Overview:\nThe application is deployed on AWS, utilizing S3, CloudFront, and EC2 instances. MongoDB Atlas provides secure, cloud-hosted data storage, supporting scalability and high availability.\nFrontend Deployment: The React app is deployed to an S3 bucket with public access and distributed via CloudFront for improved performance. Backend on EC2: The Spring Boot backend and Flask-based image service run on an EC2 instance, handling requests and providing data for travel recommendations. Database on MongoDB Atlas: MongoDB Atlas securely manages user data and saved content. Integration and Challenges Guide and POI Recommendations with Kimi API The Kimi API integration required designing backend endpoints that could request and parse responses, ensuring users receive well-organized and relevant travel information. Parsing involved handling diverse inputs and ensuring the generated guides were user-friendly.\nUser Authentication and Save Functionality The save functionality required authentication checks, allowing only logged-in users to store their favorite guides and POIs.\nConditional Access: A check ensures that only authenticated users can save guides or POIs. If not logged in, users receive a prompt to log in before proceeding.\nData Management: User-specific saved data is stored in MongoDB, accessible in the profile.\nDeployment Challenges Deploying on AWS required handling CORS policies and environment configurations. Setting up CORS allowed seamless communication between the frontend and backend, while AWS EC2 and S3 integrations facilitated a smooth, scalable deployment.\nProject Outcomes Our iTravel platform provides personalized recommendations and an interactive experience, making travel planning enjoyable and efficient.\nKey Takeaways:\nGained expertise in integrating React, Spring Boot, MongoDB, and AI-based APIs. Experience in managing and deploying on AWS with a scalable and efficient setup. Successfully created a user-friendly travel recommendation tool that combines AI with a cohesive tech stack. Future Improvements User-Submitted Reviews: Add review functionality to foster user engagement. Enhanced Profiles: Expand user profiles to include travel history and past interactions. UI Enhancements: Improve design with interactive elements and animations for a more immersive experience. Conclusion iTravel combines AI-powered recommendations, user personalization, and seamless navigation to create a travel planning platform that‚Äôs both functional and engaging. Through this project, Roxie and I gained valuable experience with a full-stack tech stack and AI integration, making iTravel a dynamic addition to the world of travel applications.\n","permalink":"http://localhost:1313/posts/tech/building-itravel---a-personalized-travel-recommendation-platform/","summary":"URL for Preview \u0026amp; Architecture Overview Preview Link: http://i-travel-app.s3-website-us-east-1.amazonaws.com/ Component Diagram:\n\u003c!DOCTYPE html\u003e\rComponent Diagram\rIntroduction My classmate Roxie and I created iTravel, a web application that provides personalized travel guides and point-of-interest (POI) recommendations using AI. The platform leverages Kimi API for AI-driven suggestions, along with a React frontend, a Spring Boot backend, and MongoDB Atlas for data storage, all deployed on AWS. Our project combines technology with intelligent suggestions to make travel planning simple and engaging, offering unique travel itineraries based on user preferences.","title":"Building iTravel: A Personalized Travel Recommendation Platform"},{"content":"Hello! I\u0026rsquo;m Aria, and this is my personal blog.üòé\nMy Background Sept 2023 ‚Äë Expected May 2025\nM.S. in Software Design and Development‰∏®University of Galway\nJan 2018 ‚Äë Nov 2022\nEnglish Teacher‰∏®The New Oriental Education Technology Group Co., Ltd.\nSep 2013 ‚Äë Jun 2017\nB.A. in French Language and Literature‰∏®Zhejiang University\nMy Interests ‚úàÔ∏èTraveling (Travelled to 29 of China\u0026rsquo;s 34 provinces and 12 countries including China!)\nüì∏Photography (Canon EOS 60D \u0026amp; Nikon 1 j5)\nüéÆVideo games (Switch \u0026amp; Steam)\nThank you for visiting my blog. I hope you find the content here interesting and useful!üòä\n","permalink":"http://localhost:1313/about/","summary":"Hello! I\u0026rsquo;m Aria, and this is my personal blog.üòé My Background Sept 2023 ‚Äë Expected May 2025 M.S. in Software Design and Development‰∏®University of Galway Jan 2018 ‚Äë Nov 2022 English Teacher‰∏®The New Oriental","title":"About Me"},{"content":"Welcome to my album! Here are some of my favorite snapshots taken in my journey.üèÉüß≥\n\u003c!DOCTYPE html\u003e\rResearch Base of Giant Panda Breeding, Chengdu, China, Apr 2016\rPompidou Centre, Paris, France, Jan 2016\rFontainebleau Palace, Fontainebleau, France, Jan 2015\rSagrada Fam√≠lia, Barcelona, Spain, Oct 2015\rHumble Administrator\u0026#39;s Garden, Suzhou, China, Nov 2014\rXixi National Wetland Park, Hangzhou, China, May 2014\rWest Lake, Hangzhou, China, Mar 2014\r","permalink":"http://localhost:1313/album/","summary":"Welcome to my album! Here are some of my favorite snapshots taken in my journey.üèÉüß≥ \u003c!DOCTYPE html\u003e Research Base of Giant Panda Breeding, Chengdu, China, Apr 2016 Pompidou Centre, Paris, France, Jan 2016 Fontainebleau Palace, Fontainebleau, France, Jan 2015 Sagrada Fam√≠lia, Barcelona, Spain, Oct 2015 Humble Administrator\u0026#39;s Garden, Suzhou, China, Nov 2014 Xixi National","title":"Album"},{"content":"‚è∞ Day 1Ô∏è‚É£: Arrival in Switzerland My solo journey began from Dublin Airport ‚úàÔ∏è to Zurich Airport, arriving around 4 PM. The Zurich Airport vibe was cool‚Äîthink minimalist German aesthetics in black, white, and grey. Swiss Airlines even threw in complimentary water and chocolate. I immediately felt loved.\nFrom the airport, I hopped onto a cute mini train at Gate E, breezed through customs, and was delighted to find the railway station right outside. A two-hour train ride landed me in Wilderswil, a small, pitch-dark town near Interlaken around 7:30 PM. To celebrate surviving the darkness, I ventured bravely into Interlaken to hunt for Korean food. The pork with spicy sauce was decent!\nChecked into Jungfrau Hotel, charming with its mountain-view terrace perfect for Instagramming snowy peaks at breakfast. The bathroom might have lacked warmth (literally no heating), and I swear the walls were made from paper, but hey, great location and cheaper than Interlaken‚ÄîI\u0026rsquo;m not complaining!\n‚è∞ Day 2Ô∏è‚É£: First Mountain \u0026amp; Grindelwald Accidentally took the wrong train in the morning (early train arrivals = traps) but still made it to Grindelwald at 9:20 AM, joining a confusing queue thanks to broken ticket machines and people staring at them like modern art exhibits.\nEventually got the \u0026ldquo;Adventure Package\u0026rdquo; for First Mountain (after Swiss logic baffled me‚Äîwhy limit online bookings?). The cable car up was shared with a family who kindly chatted about Bachalpsee Lake‚Äîtoo bad no one mentioned it would be under snow!\nClimbed painfully uphill, shedding layers dramatically. My soul momentarily left when I saw the lake was just white snow‚Äîso much for photos. On the bright side, scenic views and random mountain goats cheered me up.\nNext, tackled the cliff walk (less dramatic than expected) and bravely faced the cold on the Flyer zip line‚Äîbeside screaming tourists, I remained impressively emotionless (just freezing). The Glider was next, feeling genuinely bird-like, though equally cold. Later, snow-sledding became an adventure of nearly flipping over and awkwardly braking my shoes (safe!).\nWrapped up by exploring Grindelwald‚Äôs \u0026ldquo;magical\u0026rdquo; snowy slopes, which felt more icy apocalypse than winter wonderland in photos. Maybe summer would be kinder?\n‚è∞ Day 3Ô∏è‚É£: Lake Lucerne, Mt. Rigi \u0026amp; Lucerne City Took the famous Golden Pass train to Lucerne. Brienz Lake was postcard-perfect, Sarnersee not so much. At Lucerne, boarded a freezing boat to Vitznau, capturing blurry snow mountains through dense fog.\nHopped onto a cogwheel train to Mt. Rigi, mistakenly photographing scenery from the wrong side initially. The peak views were spectacular, despite snow covering half the path. Took the cable car down to Weggis, sprinted downhill to catch another boat (fitness goals achieved).\nLucerne was chaos due to Carnival‚Äîstreets blocked, but at least I saw a fun parade. Checked out the dying lion monument (heartbreaking beauty), speed-walked through Glacier Garden, and survived a mirror maze with minimal head bump. Ended the day with live music at the station and delicious Shin Ramyun‚Äîtrue happiness!\n‚è∞ Day 4Ô∏è‚É£: Four Little Towns \u0026amp; M√§nnlichen Mountain Started late, found Lauterbrunnen disappointingly grey (snow melting season is rough). Quickly moved on to picturesque M√ºrren via cable car‚Äîviews were fantastic, the village charmingly perched on cliffs.\nThen down to Wengen, impulsively decided to conquer M√§nnlichen\u0026rsquo;s \u0026ldquo;Royal Walk,\u0026rdquo; powered by amusing treasure hunts. The top rewarded my sweaty effort with stunning panoramic views and amusing novice-friendly ski slopes.\nEnded the day exploring picturesque Spiez‚Äîmissed the castle, but lake reflections made up for it.\nBack to my cozy hotel, feeling victorious and ready for more noodles.\n‚è∞ Day 5Ô∏è‚É£: Zurich City \u0026amp; Return Home Caught the train at 8:40 from Wilderswil, arriving in Zurich around 11:30 after missing a transfer due to smartphone distractions (classic traveler fail). Quickly visited the National Museum, which felt confusing but had an awesome 19th-century pharmacy exhibit‚Äîperfect inspiration for my final project!\nNext, zipped up the Polybahn funicular for a quick photo op at the ETH viewing platform (full of sunbathing locals‚ÄîSwitzerland knows leisure).\nGrabbed a quick sushi lunch from Migros (cheap sushi in Switzerland? Yes, please!) and caught my train to Zurich Airport. Breezed through security (minus a minor water-bottle hiccup), boarded my flight smoothly, and arrived back in Dublin perfectly timed to catch the 18:15 bus home. Swiss efficiency at its finest!\nü•≥ Definitely a trip to remember!\nUseful Tips If hiking in high season, be sure to check the weather at https://www.jungfrau.ch/en-gb/. Use public transportation - it\u0026rsquo;s reliable and scenic! If you choose to use public transportation, purchasing a Swiss Travel Pass is the least time-consuming option! You may be able to save a little more money than the former by using a half-fare card, but with a travel pass, you won\u0026rsquo;t need to buy a ticket in most cases. However, according to my research, if the trip is planned very early, buying saver day pass is the most cost-effective option üòé. ","permalink":"http://localhost:1313/posts/life/switzerland/","summary":"‚è∞ Day 1Ô∏è‚É£: Arrival in Switzerland My solo journey began from Dublin Airport ‚úàÔ∏è to Zurich Airport, arriving around 4 PM. The Zurich Airport vibe was cool‚Äîthink minimalist German aesthetics in black, white, and grey. Swiss Airlines even threw in complimentary water and chocolate. I immediately felt loved.\nFrom the airport, I hopped onto a cute mini train at Gate E, breezed through customs, and was delighted to find the railway station right outside.","title":"Solo Adventure in Switzerland (Mar 2025)"},{"content":"Data Visualization Overview https://public-paws.wmcloud.org/User:Aria0325/data/Kefan%20Chen%20-%20T356498%20Project%20Report-4.0.ipynb\nIntroduction During my participation in Outreachy project, I developed a web application to visualize the evolution of Wikipedia articles on climate change. This project aimed to help WikiProjects and the public understand how article quality has changed over time, leveraging a dataset provided by the Wikimedia Foundation‚Äôs Research team. The experience provided me with practical exposure to full-stack development, advanced data processing, and visualization techniques, enhancing my skills in these areas.\nDevelopment Process Technology Stack and Tools To build the Climate Change Visualization Web Application, I used the following technologies and tools:\nBackend: Flask: A lightweight WSGI web application framework used for building the backend infrastructure and handling API requests. Pandas: A powerful data manipulation and analysis library for processing and aggregating data. Matplotlib: A plotting library for creating dynamic visualizations. Gunicorn: A WSGI HTTP server for running the Flask application in a production environment. Frontend: HTML: For structuring the web pages. Bootstrap: For responsive and mobile-first web design. CSS: For styling the web application. Project Modules and Development Steps Climate Change Visualization Web Application Backend Development:\nLoaded and preprocessed the dataset containing feature values and predicted quality scores using Pandas. Developed REST API endpoints to handle requests for data and visualizations, enabling dynamic interaction with the frontend. Used Matplotlib to create visualizations based on user inputs, such as date range and selected features. Frontend Development:\nCreated a responsive user interface using HTML, Bootstrap, and CSS to ensure accessibility across various devices. Challenges and Solutions Challenge 1: Data Filtering and Aggregation Solution: Utilized Pandas to implement efficient data filtering, aggregation, and resampling techniques. This allowed the application to provide detailed explorations of specific metrics within customizable time frames.\nChallenge 2: Dynamic Visualization Rendering Solution: Leveraged Matplotlib to generate dynamic and interactive visualizations that reflect user-selected data features and time ranges, enhancing the application\u0026rsquo;s interactivity and usability.\nChallenge 3: Responsive Design Implementation Solution: Designed a responsive user interface with Bootstrap, ensuring that the application is accessible and user-friendly on various devices, including desktops, tablets, and smartphones.\nProject Outcomes Developed a robust tool that allows WikiProjects and the public to explore the quality evolution of Wikipedia articles on climate change, providing valuable insights into collaborative editing efforts. Gained proficiency in Flask, Pandas, Matplotlib, and responsive web design, significantly enhancing my technical capabilities. The project contributed to increased public awareness and understanding of climate change information dynamics, showcasing the practical application of data visualization in educational and research contexts. Future Improvements Implement more advanced filtering options, comparison features, and trend analysis tools to provide deeper insights into the data. Optimize data processing and visualization rendering for better performance, particularly with large datasets. Improve the UI/UX by incorporating more interactive elements and advanced design patterns. ","permalink":"http://localhost:1313/posts/tech/data-visualization/","summary":"Data Visualization Overview https://public-paws.wmcloud.org/User:Aria0325/data/Kefan%20Chen%20-%20T356498%20Project%20Report-4.0.ipynb\nIntroduction During my participation in Outreachy project, I developed a web application to visualize the evolution of Wikipedia articles on climate change. This project aimed to help WikiProjects and the public understand how article quality has changed over time, leveraging a dataset provided by the Wikimedia Foundation‚Äôs Research team. The experience provided me with practical exposure to full-stack development, advanced data processing, and visualization techniques, enhancing my skills in these areas.","title":"Data visualization for the evolution of Wikipedia articles"},{"content":"URL \u0026amp; Frontend Preview http://employees-management-system.s3-website-us-east-1.amazonaws.com/\n\u003c!DOCTYPE html\u003e\rList of Employee\rList of Departments\rAdd Employee\rAdd Department\rUpdate Employee\rUpdate Department\rSubmit Error Reminder\rIntroduction This is an extracurricular project that I completed in the first semester of my master\u0026rsquo;s program. I chose it because its technology stack overlapped significantly with what I was studying at university. Having previously developed a pure front-end e-commerce website project using React, the front-end part of this project wasn\u0026rsquo;t very challenging for me. However, what made this project meaningful was that it exposed me to the framework of a complete web product and the general steps required to complete it. This project served as an excellent practice opportunity, and I highly recommend it to software engineering students. Additionally, I deployed the application on AWS, adding a practical aspect of cloud deployment to my learning experience.\nDevelopment Process Technology Stack and Tools To build the Employee Management System, I used the following technologies and tools:\nBackend: Spring Boot 3: To provide the server-side infrastructure and business logic. Spring Data JPA (Hibernate 6): For data persistence. MySQL Database: As the database management system. IntelliJ IDEA: As the integrated development environment (IDE). Maven: For project build and dependency management. Postman: For testing REST APIs. Frontend: React JS 18+: For building user interfaces. Vite JS: As the build tool. Bootstrap CSS: For styling web pages. JavaScript: The primary scripting language. NPM: For package management. Visual Studio Code (VS Code): As the IDE. Axios: For making HTTP requests. Project Modules and Development Steps Employee Management System Backend Development:\nDefined the employee entity with fields such as id, name, department, and salary. Created a repository interface for database operations. Developed REST APIs for adding, retrieving, updating, and deleting employees. Frontend Development:\nCreated React components for listing, adding, updating, and deleting employees. Implemented form handling and validation for employee data. Used Axios to make API calls and integrate the frontend with the backend services. Challenges and Solutions Challenge 1: Managing State in React Solution: Implemented React hooks to manage state and lifecycle methods effectively. Used context API for global state management.\nChallenge 2: Securing REST APIs Solution: Integrated Spring Security and JWT to secure REST APIs. Configured roles and permissions to ensure authorized access.\nChallenge 3: Database Integration and Migrations Solution: Used Spring Data JPA with MySQL for seamless database operations. Leveraged Liquibase for database migrations and version control.\nChallenge 4: Form Validation and Error Handling Solution: Implemented both client-side and server-side validation. Used React\u0026rsquo;s form handling capabilities and Spring Boot\u0026rsquo;s validation annotations to ensure data integrity.\nProject Outcomes Built a robust Employee Management application with seamless backend and frontend integration. Gained proficiency in Spring Boot, React JS, Spring Security, and JWT. Overcame various challenges, enhancing problem-solving and debugging skills. Future Improvements Already achieved: After completing the development, I took the additional step of deploying the Employee Management System on AWS. This involved setting up an EC2 instance, configuring the environment, and deploying the backend and frontend applications. The process of deploying to AWS not only gave me hands-on experience with cloud services but also showcased the real-world applicability of my project. Add more features such as advanced search, filters, and reporting in the Employee Management System. Optimize the application for better performance, particularly in handling large datasets. Enhance the UI/UX by incorporating advanced design patterns and interactive elements. ","permalink":"http://localhost:1313/posts/tech/employee-management-system/","summary":"URL \u0026amp; Frontend Preview http://employees-management-system.s3-website-us-east-1.amazonaws.com/ \u003c!DOCTYPE html\u003e List of Employee List of Departments Add Employee Add Department Update Employee Update Department Submit Error Reminder Introduction This is an extracurricular project that I completed in the first semester of my master\u0026rsquo;s program. I chose it because its technology stack overlapped significantly with what I was studying at university. Having previously developed a pure front-end e-commerce website project using React, the front-end","title":"How to Build a Employee Management System"},{"content":"URL for Preview \u0026amp; Component Diagram Preview Link: https://comfy-sloth-store-testing.netlify.app/ Component Diagram: \u003c!DOCTYPE html\u003e\rComponent Diagram\rIntroduction In this project, I developed a full-fledged e-commerce website called Comfy Store, which is a furniture store built using React. The primary goal was to practice integrating complex front-end technologies and libraries such as React Router 6, Redux Toolkit, and Stripe Checkout. The project also included deployment to Netlify and payment processing using Stripe. This project provided valuable experience in combining multiple tools and concepts into a cohesive and interactive shopping platform.\nDevelopment Process Technology Stack and Tools Frontend: React (with Router 6): For managing the user interface and navigation between pages. Redux Toolkit: For managing state across the application. Stripe API: For processing payments. Axios: For making HTTP requests to the backend. Netlify: For deployment and setting up serverless functions. Backend: Netlify Functions: For handling serverless backend requests, such as payment processing via Stripe. Stripe API: To set up payment gateways for purchases made in the store. Project Modules and Key Features The project is divided into several key modules that drive the functionality of the e-commerce website:\nNavigation Bar and Theme:\nThe navigation bar contains links to various pages, including the homepage, product page, and cart. The project allows users to navigate seamlessly between different pages.\nProduct Listing and Single Product Pages:\nThe homepage showcases featured products, and users can navigate to individual product pages where they can view product details, such as price, description, available colors, and add items to the cart.\nProduct Filters and Pagination:\nUsers can filter products by categories, such as price, company, or color, and view products in grid or list formats. The website also features pagination for easy navigation through a large product catalog.\nCart Functionality:\nOnce items are added to the cart, users can modify the quantities or remove products. The cart page dynamically updates the total cost based on the selected quantity.\nUser Authentication and Checkout:\nThe store has an authentication system where users can log in or sign up. For ease, there is also a \u0026ldquo;guest checkout\u0026rdquo; option. After logging in, additional pages such as Checkout and Orders become available.\nStripe Checkout: Integrated for secure payment processing. Customers can finalize purchases after completing the checkout form. Integration with Stripe One of the most challenging parts of this project was integrating the Stripe API for payment processing. I first created a backend function on Netlify to handle the payment setup (/create-payment-setup) and retrieve a client secret. This client secret is then used to complete the payment through Stripe\u0026rsquo;s checkout system.\nHere are the main steps I followed for the Stripe integration:\nSetup: Installed the Stripe library and set up a function to handle payments. Stripe Checkout: Managed payment state variables and client-side logic for handling successful payments. Confirmation: Implemented a return page to display the order confirmation to users once a payment is successfully completed. Deployment to Netlify After building and testing the site locally, I deployed it on Netlify. Netlify\u0026rsquo;s serverless functions proved to be particularly useful for handling the backend payment logic, making the deployment process smoother.\nChallenges and Solutions Challenge 1: State Management Managing the state across different components, especially when it comes to the cart and payment processes, was complex. I used Redux Toolkit to handle global state management, making the process more efficient and scalable.\nChallenge 2: Stripe API Integration The Stripe payment setup required proper handling of the client-side and backend logic. I resolved this by using Netlify functions to handle payment intents securely, and managed the state using React hooks to maintain the current state of the checkout process.\nChallenge 3: Error Handling and Authentication I faced issues managing errors during checkout and login. To resolve this, I implemented both front-end and back-end error handling. Additionally, I used Auth0 for secure user authentication and authorization.\nProject Outcomes This e-commerce store is fully functional with product listings, filters, cart, and payment features. It also includes error pages and dynamic product rendering based on user interaction.\nKey takeaways from this project include:\nProficiency in React, Redux, and Stripe API. Experience with state management, payment processing, and deployment on Netlify. The successful creation of a scalable and responsive web application, accessible on various screen sizes. Future Improvements In the future, I plan to extend the Comfy Store project by adding the following features:\nProduct Reviews: Allow users to leave reviews on products they purchase. Order History: Implement order tracking and more detailed user profiles to review previous purchases. Enhanced UI/UX: Improve the overall user experience with more interactive design elements, including animations and transitions. ","permalink":"http://localhost:1313/posts/tech/e-commerce-furniture-store/","summary":"URL for Preview \u0026amp; Component Diagram Preview Link: https://comfy-sloth-store-testing.netlify.app/ Component Diagram: \u003c!DOCTYPE html\u003e Component Diagram Introduction In this project, I developed a full-fledged e-commerce website called Comfy Store, which is a furniture store built using React. The primary goal was to practice integrating complex front-end technologies and libraries such as React Router 6, Redux Toolkit, and Stripe Checkout. The project also included deployment to Netlify and payment processing using Stripe.","title":"How to Build an E-commerce Furniture Store"},{"content":"\rHow to Visit My Island Use DA code in the game: DA-3444-7211-0416\nIsland Overview üëâPartly Inspired, Partly Original: Images and DA code are for island building reference only and cannot be reposted or used commercially.\nüëâColor Scheme \u0026amp; Style: Warm tones with a European/Western countryside feel, mixed with small areas of Japanese and forest themes.\nüëâDesign Guidelines: Use system tiles as much as possible. Avoid using simple wall panels for fake scenery.\nüëâConnectivity: Most areas are connected; if you can\u0026rsquo;t find your way, try adjusting your perspective.\nüëâHouse Interior: All interiors of the main house are complete and open for visiting. The hot spring inn is a small house; the first floor is mostly done, but the other two floors are not yet finished.\nü•≥Finally, enjoy Your Visit!\nMeet the Islanders Island Gallery \u003c!DOCTYPE html\u003e\rIsland reshaping in one month\rThe road from the airport to the square\rMy home, the hill behind Resident Services, and shops\rThe museum and surroundings\rForest theme park\rOrchard and campsite\rJapanese hot spring hotel\rBeach: Drawing spot, reading Nook and outdoor cinema\rBeach: Surfboard rental, Nook\u0026#39;s tombstone, seafood stall, pier and outdoor two-story Caf√©\rIslander living area\rDesign Inspiration Sources ins@kumao_atsumori\rins@_horriblegaming\rYoutube@Haruchi create\rYoutube@„ÅØ„Çâ„ÅøONIKU\rXiaohongshu@ÊàëÂæàÈ≤∏È±º\rXiaohongshu@Âº†Âº†Âú®Âä®Ê£Æ\r","permalink":"http://localhost:1313/posts/life/my-island-1.0/","summary":"How to Visit My Island Use DA code in the game: DA-3444-7211-0416 Island Overview üëâPartly Inspired, Partly Original: Images and DA code are for island building reference only and cannot be reposted or used commercially. üëâColor Scheme \u0026amp; Style: Warm tones with a European/Western countryside feel, mixed with small areas of Japanese and forest themes. üëâDes","title":"My Island 1.0"},{"content":"No posts so the archive is not available now.\nPlease click here to return to the home page.\n","permalink":"http://localhost:1313/archive/","summary":"No posts so the archive is not available now.\nPlease click here to return to the home page.","title":""}]